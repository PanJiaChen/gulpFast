/////////////////////////////////////////////////////////////////////////////////
//Line Divider
////////////////////////////////////////////////////////////////////////////////
/*
 Description: Creats a line divider
 ============
 Use: -> 
 ====
 Position: wtop, bottom, right, left
 Size: unit, of size
 Style: Border Style
 Opacity: ->
  1. Pass a opacity value
  2. Pass your own `rgba` value, ie: green, #fff, rgba(), ect.
 */
divider($position, $size = 1px, $style = solid, $opacity = 0.1)
  position: relative;
  -webkit-tap-highlight-color: transparent;
  if $position == 'top'
    if typeof($opacity) == 'rgba'
      border-top: $size $style $opacity;
    else
      border-top: $size $style rgba(0, 0, 0, $opacity);
  if $position == 'bottom'
    if typeof($opacity) == 'rgba'
      border-bottom: $size $style $opacity;
    else
      border-bottom: $size $style rgba(0, 0, 0, $opacity);
  if $position == 'right'
    if typeof($opacity) == 'rgba'
      border-right: $size $style $opacity;
    else      
      border-right: $size $style rgba(0, 0, 0, $opacity);
  if $position == 'left'
    if typeof($opacity) == 'rgba'
      border-right: $size $style $opacity;
    else
      border-left: $size $style rgba(0, 0, 0, $opacity);


////////////////////////////////////////////////////////////////////////////////
//Header with line
////////////////////////////////////////////////////////////////////////////////
/*
 * Description: Creates break lines on both sides of text
   ============
   Use: -> 
   ====
   selector: the class, id, ect.
   color: rgba
   size: unit
   lineClossness: You can specify how close to the text you want your line 
 */
headerLine($selector, $color = #7F8C8D, $size = 2px, $lineCloseness = 1em)
  {$selector}
    display: flex;
    line-height: 0;
    &:after, &:before
      z-index: 1
      content: "";
      flex: 1;
      align-items: center;
      height: $size;
      margin: 0 $lineCloseness;
      background: $color;

////////////////////////////////////////////////////////////////////////////////
//Radial Gradiant for subtl bg
////////////////////////////////////////////////////////////////////////////////
/*
 * Description: Creates a soft radial background since white is so white
   ============
   Use: -> 
   ====
   Pretty typical radial gradiant stuff
 */
softRadialBG($centerColor = #fff, $pos1 = center, $pos2 = center, $shape = circle, $size = cover)
  $outColor = alpha($centerColor, 0.7)
  background-image: radial-gradient($pos1 $pos2, $shape $size, $centerColor, $outColor);
  background-image: -webkit-radial-gradient($pos1 $pos2, $shape $size, $centerColor, $outColor);
  z-index: -1

////////////////////////////////////////////////////////////////////////////////
//Hexagon
////////////////////////////////////////////////////////////////////////////////
/*
 * Description: Creates a Hexagon with custome, sizes, shapes, backgrounds
   ============
   Use: -> 
   ====
   Reffer to my codepen @
   for more some examples, its pretty simple.
 */
hexagon($class, $size = 300px, $background = '', $borderColor = '', $borderWidth = 0, $shadow = 0)
  $scaleFactor = math(0.523598776, 'tan');
  $width = unit($size, 'px');
  $height = unit($width /  math(3, 'sqrt'), 'px');
  $widthHeight = unit($width / math(2, 'sqrt'), 'px')
  $scaledBorderWidth = unit($borderWidth * math(2, 'sqrt'), 'px')
  $sideLength = $size / math(3, 'sqrt')
  $left = unit($sideLength / 4 - $borderWidth + 1, 'px')
  $bgHeight = $height * 2 - ($borderWidth / math(3, 'sqrt') * 4)
  $coverWidth = $width - $borderWidth * 2; 
  $capBorderHeight = $borderWidth*2 / math(3, 'sqrt'); 
  $capHeight = unit($height - $capBorderHeight, 'px');
  $capBorderWidth = $borderWidth * math(2, 'sqrt');
  $bgBorder = solid unit($capBorderWidth, 'px') $borderColor;
  
  //Main Config
  if typeof($background) == 'rgba'
    //No BackGround
    {$class}
      position: absolute;
      background: $background;
      width: $width; 
      height: $height;
      margin: unit($height / 2, 'px') 0;
      box-shadow: $shadow;
      border-left: solid $borderWidth $borderColor;
      border-right: solid $borderWidth $borderColor;
      &:before, &:after
        content: "";
        position: absolute;
        z-index: 1;
        width: $widthHeight;
        height: $widthHeight;
        transform: scaleY($scaleFactor) rotate(-45deg);
        background-color: inherit;
        left: $left;
        box-shadow: $shadow;
      &:before
        top: unit((($size * -1) / math(2, 'sqrt') / 2), 'px');
        border-top: solid $scaledBorderWidth $borderColor;
        border-right: solid $scaledBorderWidth $borderColor;
      &:after
        bottom: unit((($size * -1) / math(2, 'sqrt') / 2), 'px');
        border-bottom: solid $scaledBorderWidth $borderColor;
        border-left: solid $scaledBorderWidth $borderColor;
    //Cover up shadows
    if $shadow != ''
      {$class} span 
          display: block;
          position: absolute;
          top: unit($borderWidth * $scaleFactor, 'px');
          left: 0;
          width: unit($width - $borderWidth * 2, 'px');
          height: unit($height - $borderWidth * $scaleFactor * 2, 'px');
          z-index: 2;
          background: inherit;
  else
    //Bg image
    {$class}
      position: absolute;
      width: $width; 
      height: $height;
      margin: unit($height / 2, 'px') 0;
      box-shadow: $shadow;
      border-left: solid $borderWidth $borderColor;
      border-right: solid $borderWidth $borderColor;
      background-image: $background;
      background-size: auto $bgHeight;
      background-position: center;
      .hexTop, .hexBottom
        position: absolute;
        z-index: 1;
        width: $widthHeight;
        height: $widthHeight;
        overflow: hidden;
        transform: scaleY($scaleFactor) rotate(-45deg);
        background: inherit;
        left: unit(($width - $widthHeight) / 2 - $borderWidth, 'px');
        if $shadow != ''
          box-shadow: $shadow;
        &:after
          content: "";
          position: absolute;
          width: $coverWidth;
          height: $capHeight;
          transform: rotate(45deg) scaleY(1/$scaleFactor) translateY((($height * -1 ) / 2) + $capBorderHeight/2);
          transform-origin: 0 0;
          background: inherit;
      .hexTop
        top: unit(($width * -1) / math(2, 'sqrt') / 2, 'px')
        border-top: $bgBorder;
        border-right: $bgBorder;
        &:after 
          background-position: center top;
      .hexBottom
        bottom: unit(($width * -1) / math(2, 'sqrt') / 2, 'px')
        border-bottom: $bgBorder;
        border-left: $bgBorder;
        &:after 
          background-position: center bottom;
    //Shadow
    if $shadow != ''
      {$class}
        box-shadow: $shadow;
        &:after
          content: "";
          position: absolute;
          top: 5.7735px;
          left: 0;
          width: 230.0000px;
          height: 132.7906px;
          z-index: 2;
          background: inherit;

